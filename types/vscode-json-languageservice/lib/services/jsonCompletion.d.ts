import Parser = require('../parser/jsonParser');
import SchemaService = require('./jsonSchemaService');
import { JSONWorkerContribution } from '../jsonContributions';
import { PromiseConstructor, Thenable } from '../jsonLanguageService';
import { CompletionItem, CompletionList, TextDocument, Position } from 'vscode-languageserver-types';
export declare class JSONCompletion {
    private schemaService;
    private contributions;
    private promise;
    constructor(schemaService: SchemaService.IJSONSchemaService, contributions?: JSONWorkerContribution[], promiseConstructor?: PromiseConstructor);
    doResolve(item: CompletionItem): Thenable<CompletionItem>;
    doComplete(document: TextDocument, position: Position, doc: Parser.JSONDocument): Thenable<CompletionList>;
    private getPropertyCompletions(schema, doc, node, addValue, separatorAfter, collector);
    private getSchemaLessPropertyCompletions(doc, node, currentKey, collector);
    private getSchemaLessValueCompletions(doc, node, offset, separatorAfter, document, collector);
    private getValueCompletions(schema, doc, node, offset, separatorAfter, collector, types);
    private addSchemaValueCompletions(schema, separatorAfter, collector, types);
    private addDefaultValueCompletions(schema, separatorAfter, collector, arrayDepth?);
    private addEnumValueCompletions(schema, separatorAfter, collector);
    private collectTypes(schema, types);
    private addFillerValueCompletions(types, separatorAfter, collector);
    private addBooleanValueCompletion(value, separatorAfter, collector);
    private addNullValueCompletion(separatorAfter, collector);
    private addDollarSchemaCompletions(separatorAfter, collector);
    private getLabelForValue(value);
    private getFilterTextForValue(value);
    private getLabelForSnippetValue(value);
    private getInsertTextForPlainText(text);
    private getInsertTextForValue(value, separatorAfter);
    private getInsertTextForSnippetValue(value, separatorAfter);
    private templateVarIdCounter;
    private getInsertTextForGuessedValue(value, separatorAfter);
    private getSuggestionKind(type);
    private getLabelTextForMatchingNode(node, document);
    private getInsertTextForMatchingNode(node, document, separatorAfter);
    private getInsertTextForProperty(key, propertySchema, addValue, separatorAfter);
    private getCurrentWord(document, offset);
    private evaluateSeparatorAfter(document, offset);
    private isInComment(document, start, offset);
}
